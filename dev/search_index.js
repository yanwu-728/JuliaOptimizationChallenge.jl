var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = JuliaOptimizationChallenge","category":"page"},{"location":"#JuliaOptimizationChallenge","page":"Home","title":"JuliaOptimizationChallenge","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JuliaOptimizationChallenge.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [JuliaOptimizationChallenge]","category":"page"},{"location":"#JuliaOptimizationChallenge.Problem","page":"Home","title":"JuliaOptimizationChallenge.Problem","text":"Store a problem which represents a city using a matrix and other parameters\n\nFields\n\n total_duration::Int: total time allotted for the car itineraries (in seconds)\n- nb_cars::Int: number of cars in the fleet\n- starting_junction::Int: junction at which all the cars are located initially\n- junctions::Vector{Junction}: list of junctions\n- adjacency::Vector{Vector{Street}}: list where ith entry is all the streets that you can travel through from ith junction\n\n\n\n\n\n","category":"type"},{"location":"#JuliaOptimizationChallenge.Problem-Tuple{HashCode2014.City}","page":"Home","title":"JuliaOptimizationChallenge.Problem","text":"Creates a Problem instance using a HashCode2014.jl City object\n\n\n\n\n\n","category":"method"},{"location":"#JuliaOptimizationChallenge.compute_upper_bound-Tuple{Any}","page":"Home","title":"JuliaOptimizationChallenge.compute_upper_bound","text":"Calculate an upper bound on the number of meters that can be covered using a HashCode2014.jl City instance\n\n\n\n\n\n","category":"method"},{"location":"#JuliaOptimizationChallenge.solver-Tuple{Any}","page":"Home","title":"JuliaOptimizationChallenge.solver","text":"Find a possible solution of itineraries for each car, given a problem instance\n\nOutput\n\n- a set of itineraries for each of the cars\n\n\n\n\n\n","category":"method"}]
}
